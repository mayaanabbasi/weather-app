{"version":3,"sources":["Components/Form.js","Components/Title.js","Components/Display.js","App.js","serviceWorker.js","index.js"],"names":["Form","_ref","getWeather","react_default","a","createElement","onSubmit","type","name","placeholder","required","Title","className","Display","props","City","Country","Temperature","Humidity","Description","API_KEY","App","state","undefined","_callee","e","city","country","api_call","data","tempcelsius","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","main","temp","toFixed","_this","setState","sys","humidity","weather","description","stop","Components_Title","Components_Form","this","Components_Display","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c0763307.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = ({getWeather}) => {\r\n    return (\r\n        <form onSubmit={getWeather}>\r\n            <input type='text' name='city' placeholder='City...' required></input>\r\n            <input type='text' name='country' placeholder='Country...' required></input>\r\n            <button>Get weather</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Title = () => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"title-container__title\">Weather Finder</h1>\r\n            <h3 className=\"title-container__subtitle\">This app lets you check Temperature, conditions and more...</h3>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Title;","import React from 'react';\r\n\r\nconst Display = (props) => {\r\n    return (\r\n        <div className=\"weather__info\">\r\n            { \r\n                props.City && props.Country && <p className=\"weather__key\">Location: \r\n                <span className=\"weather__value\"> {props.City}, {props.Country}</span>\r\n                </p>\r\n            }\r\n            { \r\n                props.Temperature && <p className=\"weather__key\">Temprature: \r\n                <span className=\"weather__value\"> {props.Temperature} Â°C</span>\r\n                </p>\r\n            }\r\n            { \r\n                props.Humidity && <p className=\"weather__key\">Humidity: \r\n                <span className=\"weather__value\"> {props.Humidity}</span>\r\n                </p>\r\n            }\r\n            { \r\n                props.Description && <p className=\"weather__key\">Description: \r\n                <span className=\"weather__value\"> {props.Description}</span>\r\n                </p>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Display; ","import React from 'react';\nimport Form from './Components/Form';\nimport Title from './Components/Title';\nimport Display from './Components/Display';\n\nconst API_KEY = 'da74fef15fef93448150fee9215da6bf';\nclass App extends React.Component {\n  state = {\n    Temperature: undefined,\n    City: undefined,\n    Country: undefined,\n    Humidity: undefined,\n    Description: undefined\n  }\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch (`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`);\n    const data = await api_call.json();\n    console.log(data);\n    const tempcelsius = (data.main.temp - 273.15).toFixed();\n    this.setState({\n      Temperature: tempcelsius,\n      City: data.name,\n      Country: data.sys.country,\n      Humidity: data.main.humidity,\n      Description: data.weather[0].description\n    })\n  }\n  render () {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                 <Title /> \n                </div>\n                <div className=\"col-xs-7 form-container\">\n                  <Form getWeather={this.getWeather}/>\n                  <Display \n                    Temperature={this.state.Temperature} \n                    City={this.state.City} \n                    Country={this.state.Country}\n                    Humidity={this.state.Humidity}\n                    Description={this.state.Description}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n        \n        \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}